<diagram program="umletino" version="15.1"><zoom_level>10</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>220</x><y>10</y><w>240</w><h>90</h></coordinates><panel_attributes>GUIHandler
--
static int SQUARE_SIZE
static int WIDTH_PADDING
static int HEIGHT_PADDING
--
GUIHandler(RenderWindow &amp;window, std::string fen)
void runMainLoop()

fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>110</x><y>150</y><w>240</w><h>230</h></coordinates><panel_attributes>Board
--
int sideToMove
int enPassantFile
int castlingRights

Piece board[64]
Bitboard *bitboards[Piece::PIECE_NUMBER]
int whiteKingIndex
int blackKingIndex
--
enum GameStatus: NO_MATE, STALEMATE, LOSE
--
Board(std::string fen)
void initZobrist()
Bitboard getLegalPieceMovesBitboard(int pieceIndex)
void makeMove(Move move, bool speculative = true)
bool isInCheck(int color)
int getGameStatus(int color)
Move generateBotMove()

fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>10</x><y>430</y><w>210</w><h>250</h></coordinates><panel_attributes>Bitboard
--
unsigned long long bitboard;
--
Bitboard()
Bitboard(unsigned long long bitboard)

void addBit(int index)
void removeBit(int index)
bool isEmpty()
bool hasBit(int index)
int countBits()
operator bool()

Bitboard operator|(Bitboard other)
Bitboard operator|(unsigned long long other)
Bitboard operator&amp;(Bitboard other)
Bitboard operator&amp;(unsigned long long other)

fontsize=9
Bitboard file(int file)
Bitboard rank(int rank)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>360</x><y>150</y><w>190</w><h>50</h></coordinates><panel_attributes>Images
--
uint8_t *WHITE_KING, *BLACK_KING, ...
int WHITE_KING_SIZE, BLACK_KING_SIZE, ...
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>230</x><y>430</y><w>240</w><h>280</h></coordinates><panel_attributes>Move
--
int from
int to
int piece
int capturedPiece
int promotion Piece

int enPassantFile
int castlingRights
int flags
--
enum Flags (powers of two)
	NORMAL, CAPTURE, PAWN_DOUBLE
	EP_CAPTURE, PROMOTION
	KSIDE_CASTLE, QSIDE_CASTLE
--
Move()
Move(int from, int to, int movePiece, int capturedPiece,
           int enPassantFile, int castlingRights,
           int promotionPiece = PIECE::EMPTY

int toInt()
std::string toString()
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>750</x><y>150</y><w>120</w><h>70</h></coordinates><panel_attributes>OpeningBook
--
int book[16552]
--
OpeningBook()
int operator[](int index)
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>600</x><y>160</y><w>120</w><h>60</h></coordinates><panel_attributes>Openings
--
Openings()
bool addMove(int move)
int getNextMove()
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>600</x><y>230</y><w>190</w><h>120</h></coordinates><panel_attributes>PieceEvalTables
--
static int PAWN_EVAL_TABLE[64]
static int KNIGHT_EVAL_TABLE[64]
static int BISHOP_EVAL_TABLE[64]
static int ROOK_EVAL_TABLE[64]
static int QUEEN_EVAL_TABLE[64]
static int KING_EVAL_TABLE[64]
static int KING_ENDGAME_EVAL_TABLE[64]
static int KINGS_DISTANCE_EVAL_TABLE[16]
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>500</x><y>620</y><w>210</w><h>260</h></coordinates><panel_attributes>Piece
--
static int PIECE_VALUES[7]
static int PIECE_INDICES[12]
--
static int *generateIntArray(Piece board[64])
static Piece fromChar(char fen)
--
int piece
--
enum PieceTypes: EMPTY, PAWN, KNIGHT, ...
enum PieceColors: WHITE = 8, BLACK = 16
enum Pieces: WHITE_PAWN, WHITE_KNIGHT, ...
--
Piece()
Piece(int type, int color)
Piece(char fen)
Piece(int piece)

int getPieceType()
int getPieceColor()
char getPieceChar()

bool isEmpty()
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>600</x><y>420</y><w>230</w><h>180</h></coordinates><panel_attributes>Zobrist
--
typedef unsigned long long ZobristKey
--
ZobristKey **pieceKeys
ZobristKey *castlingKeys
ZobristKey *enPassantKeys
ZobristKey sideKey
--
Zobrist()
~Zobrist()

void init()

ZobristKey getInitialHash(int board[64],
	int castlingRights, int enPassantFile, int sideToMove)
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>220</x><y>90</y><w>140</w><h>80</h></coordinates><panel_attributes></panel_attributes><additional_attributes>120;10;120;40;10;40;10;60</additional_attributes></element><element><id>Relation</id><coordinates><x>330</x><y>110</y><w>150</w><h>60</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;20;130;20;130;40</additional_attributes></element><element><id>Relation</id><coordinates><x>110</x><y>370</y><w>140</w><h>80</h></coordinates><panel_attributes></panel_attributes><additional_attributes>120;10;120;40;10;40;10;60</additional_attributes></element><element><id>Relation</id><coordinates><x>220</x><y>390</y><w>150</w><h>60</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;20;130;20;130;40</additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>270</y><w>60</w><h>270</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;10;10;250;40;250</additional_attributes></element><element><id>UMLClass</id><coordinates><x>600</x><y>360</y><w>190</w><h>50</h></coordinates><panel_attributes>MovesLookup
--
unsigned long long KNIGHT_MOVES[64]
unsigned long long KING_MOVES[64]
fontsize=9</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>270</y><w>60</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>40;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>370</y><w>60</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>40;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>170</y><w>60</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>40;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>710</x><y>170</y><w>60</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>40;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>180</y><w>30</w><h>120</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;100;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>340</x><y>390</y><w>250</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>230;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>460</x><y>640</y><w>60</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;20;40;20</additional_attributes></element><element><id>Relation</id><coordinates><x>650</x><y>590</y><w>30</w><h>50</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;10;10;30</additional_attributes></element></diagram>